Unit Tests Report
Just Move
11/29/2022

Register Tests
  Enter email and password
  See if clicking on Sign Up brings the user to a new home page
  Checked firebase authentication to see if the email is there
  Added multiple emails and verified in firebase authentication that new accounts were created

Login Tests
  Enter register email and password
  Verified that clicking Log In brings the user to their home page

Adding Goals Test
  Created new goal in popup form
  Validated the information of the goal from user input appeared in new table row and continued to appear in table even after refreshing page
  Confirmed goal information was stored correctly in firebase

Removing Goals Test
  Clicked on trash icon of the table row with the desired goal to delete
  Visually confirmed that the goal disappeared from the table immediately and again after refreshing page
  Confirmed that all details related to the goal were removed from firebase

Editing Goals Test
  Created a goal with all data filled in
  Clicked the edit button and checked that editable properties switched to text inputs
  Edited an input
  Clicked the edit button to save the changes
  Confirmed that all goal information (both edited and not edited) was stored correctly in firebase and also updated properly in the goals list
  Repeated these steps with every editable property

Adding Subgoals Test
  Added a new subgoal through popup form
  Made sure the subgoal was listed out into the table for the respective goal
  Checked that the subgoals stayed after refreshing the page
  Checked that the checkboxes for each subgoal stayed checked or unchecked on refresh

Progress Bar Test
  Added a goal
  Verified that the progress bar shows up and has 0% completion
  Added 2 subgoals through the popup form
  Checked the box by the first subgoal that was added
  Verified that the progress bar displayed 50% completion with a bar half filled
  Checked the box by the second subgoal
  Verified that the progress bar displayed a green checkmark with a bar fully filled

Reminder Email Tests
  Set the reminder date to the current date
  Console.logged a list of emails that corresponded to users who had goals with a reminder date of the current date 
  Verified this through the firebase database
  Checked emails to confirm that they were received
  Verified through firebase that only emails with tasks that had a reminderdate of the current date were sent an email
  Changed the reminder date of goals to make sure that the email was not being sent unless the goal had a reminder date equal to the current date

WeeklySummary Email Tests
  Checked all emails of users with goals with a mostRecentDate within the past week to confirm that emails were sending to the the proper emails
  Checked the email to confirm that the correct goals and subtasks were mentioned in the email
  Removed goals with mostRecentDate within the past week from users’ accounts and verifed that those goals and corresponding subtasks were not mentioned in those users’ emails

onSubtaskCompletion Tests
  Verified that when a subtask was marked as completed that the mostRecentDate would change to the currentDate
  Verified that when a subtask was marked as completed that the reminderDate would move forward by 7 days
  Made sure that completing multiple subtasks within a week would not change the reminderDate multiple times

Filtering Goals Tests:
  Added a few goals and applied different predefined categories to each goal
  Applied predefined category filters from the side navigation bar
  Verified that the only goals that appeared in the table had at least one category that was in my list of applied filters
  Removed a filter and confirmed that the goals I had that did not contain that category reappeared in the table

Sorting Goals Tests:
  Clicked on the ‘Start Date’ under ‘Filters’ tab in the side navigation bar
  Confirmed a visual image of an arrow pointing downward next to the filter tab
  Confirmed that the goals appear in descending order with the least recent date at the top
  Clicked on the ‘Start Date’ under ‘Filters’ tab in the side navigation bar
  Confirmed a visual image of an arrow pointing upward next to the filter tab
  Confirmed that the goals appear in ascending order with the most recent date at the top

Guest login
Equivalence classes:

User does not wish to use an account
When the user clicks the "Use as Guest" button, they should be taken to the home page and data should be loaded from LocalStorage. In other parts of this document, this state will be referred to as "not logged in".

Goal saving
Equivalence classes:

User is not logged in
User is logged in, internet connected
User is logged in with internet instability
In the first two cases, we start with no goals. Then we add some goals and refresh to ensure it is remembered. We then edit a goal, refresh, and ensure it is edited. We then delete a goal, refresh, and ensure it is deleted.

For the third equivalence class, we do the same three tests as above but disconnect the network connection before each step. We then reconnect after the refresh is interrupted, refresh, and ensure that the data was saved after all.

Priority
Equivalence classes:

Adding priority through goal add
Editing priority
Editing without changing priority
Modify subgoal state
For the first one, we add a new goal with a priority (two tests, zero and non-zero) and ensure that the priority is properly saved and displayed, even after a refresh.

For the second test, we edit an existing goal to change the priority and ensure the changes are correct, even after a refresh. For the third test, we edit something other than priority and ensure that priority is not modified, even after a refresh.

For the fourth test, we modify the state of a subgoal, which causes an internal edit and save. We ensure that the priority remains the same after a refresh.

Sorting
Equivalence classes:

Start date sorting, ascending
Start date sorting, descending
Priority sorting, ascending
Priority sorting, descending
Progress sorting, ascending
Progress sorting, descending
User logged in
User logged out
For each test, we assume that we have multiple goals, some of which differ and some of which are the same with regard to the comparator used in the given sort. All tests assume the filters tab is open.

To test the first two classes, click on the "Start Date" button. It should change to show a down arrow, and the goal list should be sorted by start date descending. If goals were created on the same date, they will go by order created. Click on "Start Date" again and it will change to an up arrow, and goals will be sorted by start date ascending.

The second two classses are tested similarly, except that on first click the goals should be sorted ascending, and then descending on the second click. When descending, priority should go from ---- to = to ++++. Ascending is this reversed.

The third two are also tested similarly to the first two. Goals will be sorted by the percentage shown in the progress bar.

The last two tests are done by setting a sort method to something other than start date ascending (the default) and then refreshing the page. The last used sort should be remembered and used.

Stats
Equivalence classes:

No goals exist
Goals exist but have not been recently worked on
Goals have been recently worked on, but subgoals have not
Goals and subgoals have been recently worked on
Testing the first equivalence class is trivial to do by deleting all the goals. Testing for the third equivalence class is also easy, as creating a goal counts as "recent work" to the program. To test the second equivalence class, the dates should be modified to be at least a week old. Testing for the fourth equivalence class requires adding subgoals and completing them.

An additional test for the third equivalence class is to add subgoals, but not complete any of them. This should behave the same as not adding any for the purpose of testing.

An additional test for the second equivalence class is to add subgoals, complete some, and then change the dates so that they are more than a week old.

An additional test for the fourth equivalence class is to work with more than one goal and then delete one of them to make sure the statistics only account for goals that have not been deleted.

Dark mode
Equivalence classes:

Logged in, starting in light mode
Logged in, starting in dark mode
Not logged in, starting in light mode
Not logged in, starting in dark mode
Due to the simplicity of the features, the setup for the tests is rather evident.

For each class, the mode was toggled to ensure that the transtion affected what it was intended to. The page was then refreshed to ensure that the change was persistent.
